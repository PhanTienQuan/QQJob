@model MessageViewModel
@{
    ViewBag.Title = "Message";
}
<style>
    .chat__content {
        height: 400px; /* or any fixed height */
        overflow-y: auto;
        display: flex;
        flex-direction: column-reverse; /* optional if you want new messages at bottom */
        overscroll-behavior: contain;
    }
</style>
<!-- content area -->
<div class="dashboard__content d-flex template-dashboard ">
    <partial name="_LeftMenu" />
    <div class="dashboard__right">
        <div class="dash__content ">

            <!-- sidebar menu -->
            <div class="sidebar__menu d-md-block d-lg-none">
                <div class="sidebar__action"><i class="fa-sharp fa-regular fa-bars"></i> Sidebar</div>
            </div>
            <!-- sidebar menu end -->

            <h6 class="fw-semibold mb-4">Message</h6>
            <!-- mobile message end -->
            <div class="candidate__message">
                <div class="candidate__message__content">
                    <div class="message__left">
                        <!-- search people -->
                        <div class="search__job">
                            <div class="position-relative">
                                <input type="text" id="search" placeholder="Find Top Employer" required="">
                                <i class="fa-light fa-magnifying-glass"></i>
                            </div>
                        </div>
                        <!-- search people end -->
                        <!-- message filter -->
                        <div class="message__filter">
                            <ul class="list-unstyled">
                                <li class="nav-item"><a href="#" class="nav-link active">All</a></li>
                                <li class="nav-item"><a href="#" class="nav-link">Unread</a></li>
                                <li class="nav-item"><a href="#" class="nav-link">Read</a></li>
                            </ul>
                        </div>
                        <!-- message filter end -->
                        <!-- CHAT USER -->
                        <div class="chat__user__list">
                            <!-- single user -->
                            @if (Model.Sessions.Any())
                            {
                                foreach (ChatSession chatSession in Model.Sessions)
                                {
                                    var otherUser = chatSession.User1Id == Model.CurrentUser.Id ? chatSession.User2 : chatSession.User1;
                                    <div class="single__chat__person" data-sessionId="@chatSession.ChatId">
                                        <div class="d-flex align-items-center gap-30">
                                            <div class="avater">
                                                <img src="@otherUser.Avatar" alt="">
                                            </div>
                                            <div class="chat__person__meta">
                                                <h6 class="font-20 fw-medium mb-0">@otherUser.FullName</h6>
                                                @{
                                                    if (chatSession.Messages != null && chatSession.Messages.Any())
                                                    {
                                                        var chat = chatSession.Messages.OrderByDescending(m => m.SentAt).FirstOrDefault();

                                                        if (chat?.SenderId == Model.CurrentUser.Id)
                                                        {
                                                            <p>You: @chat.MessageText</p>
                                                        }
                                                        else
                                                        {
                                                            <p>@otherUser.FullName: @chat.MessageText</p>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>

                                        <div class="right__count">
                                            <span class="time">6 Hour ago</span>
                                            <span class="count">2</span>
                                        </div>
                                    </div>
                                }
                            }
                            <!-- single user end -->
                        </div>
                        <!-- CHAT USER ENMD -->
                    </div>
                    @if (Model.CurrentChatSession != null)
                    {
                        var otherUser = Model.CurrentChatSession.User1Id != Model.CurrentUser.Id ? Model.CurrentChatSession.User1 : Model.CurrentChatSession.User2;
                        <div class="message__content">
                            <div class="chat__header">
                                <div class="avatar">
                                    <img src="@otherUser.Avatar" alt="">
                                </div>
                                <div class="content">
                                    <h6 class="font-20 fw-semibold mb-0">Upwork.Inc</h6>
                                    <span class="status">Online</span>
                                </div>
                            </div>
                            <div class="chat__content" id="chatMessages" style="height:500px; overflow-y:auto;">
                                @foreach (ChatMessage chatMessage in Model.CurrentChatSession.Messages)
                                {
                                    var isCurrentUser = chatMessage.SenderId == Model.CurrentUser.Id;
                                    var messageClass = isCurrentUser ? "msg receiver" : "msg sender";
                                    <div class="@messageClass">
                                        <div class="avatar">
                                            <img src="@chatMessage.Sender.Avatar" alt="">
                                        </div>
                                        <div class="content">
                                            <p>
                                                @chatMessage.MessageText
                                            </p>
                                            <span class="time">@chatMessage.SentAt</span>
                                        </div>
                                    </div>
                                }
                                <div class="input__msg">
                                    <form action="#">
                                        <input type="text" placeholder="Type a message" id="messageInput">
                                        <label for="file">
                                            <svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M4.36841 1.00084C3.40673 1.15916 2.71283 1.45389 2.17136 2.00126C1 3.1861 1 5.09346 1 8.90818C1 12.7229 1 14.6303 2.17136 15.8159C3.34273 17.0016 5.22819 17.0008 8.99997 17.0008C12.7709 17.0008 14.6572 17.0008 15.8286 15.8159C16.9999 14.6311 16.9999 12.7229 16.9999 8.90818C16.9999 5.09346 16.9999 3.18525 15.8286 2.00042C15.2871 1.45305 14.5932 1.15832 13.6315 1" stroke="#7D8087" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                                <path d="M6.89471 3.10721C7.30903 2.6811 8.41049 1.00195 8.99997 1.00195M8.99997 1.00195C9.58944 1.00195 10.6909 2.6811 11.1052 3.10721M8.99997 1.00195V7.73877M16.9999 10.2651H12.8517C12.1427 10.2651 11.5861 10.8579 11.2728 11.4836C10.9334 12.164 10.2539 12.7914 8.99997 12.7914C7.74608 12.7914 7.0665 12.164 6.72629 11.4836C6.41471 10.8579 5.85724 10.2651 5.14819 10.2651H1" stroke="#7D8087" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                        </label>
                                        <input type="file" id="file" style="display: none;">
                                        <button class="message__btn">Send</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="message__content">
                            <div class="chat__header">
                                <div class="content">
                                    <h6 class="font-20 fw-semibold mb-0">No conversation right now</h6>

                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-center mt-30">
            <p class="copyright">Copyright © 2024 All Rights Reserved by jobpath</p>
        </div>
    </div>
</div>
<!-- content area end -->
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
                                        .withUrl("/chathub")
                                        .build();
        connection.start().then(() => {
            document.querySelectorAll(".single__chat__person").forEach(session => {
                const chatId = session.dataset.sessionid;
                connection.invoke("JoinChat", chatId);
            });
        });

        connection.on("ReceiveMessage", function (message) {
            const msgDiv = document.createElement("div");

            const isCurrentUser = message.senderId === "@Model.CurrentUser.Id";
            msgDiv.className = isCurrentUser ? "msg receiver" : "msg sender";

            msgDiv.innerHTML = `
                <div class="avatar">
                    <img src="${message.sender.avatar}" alt="">
                </div>
                <div class="content">
                    <p>${message.messageText}</p>
                    <span class="time">${new Date(message.sentAt).toLocaleString()}</span>
                </div>
            `;
            const messagesDiv = document.getElementById("chatMessages");
            messagesDiv.insertBefore(msgDiv, messagesDiv.querySelector(".input__msg"));

            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        document.querySelectorAll(".message__btn").forEach(button => {
            button.addEventListener("click", function (e) {
                e.preventDefault();
                const chatId = "@Model.CurrentChatSession?.ChatId";
                const input = document.getElementById("messageInput");
                const message = input.value;

                connection.invoke("SendMessage", chatId, "@Model.CurrentUser.Id", message);
                input.value = "";
            });
        });

        const messageInput = document.getElementById("messageInput");
        const sendButton = document.querySelector(".message__btn");

        messageInput.addEventListener("input", function () {
            const isEmpty = messageInput.value.trim() === "";
            sendButton.disabled = isEmpty;

            if (isEmpty) {
                sendButton.style.backgroundColor = "#ccc";
                sendButton.style.cursor = "not-allowed";
            } else {
                sendButton.style.backgroundColor = "#34A853"; // blue when enabled
                sendButton.style.cursor = "pointer";
            }
        });

        window.addEventListener("DOMContentLoaded", () => {
            const sendButton = document.querySelector(".message__btn");

            sendButton.disabled = true;
            sendButton.style.backgroundColor = "#ccc";
            sendButton.style.cursor = "not-allowed";
            const chatMessagesDiv = document.getElementById("chatMessages");
            if (chatMessagesDiv) {
                chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
            }
        });

        const chatMessagesDiv = document.getElementById('chatMessages');
        const chatId = '@Model.CurrentChatSession.ChatId';
        let loadedMessagesCount = 10;
        const loadBatchSize = 10;
        let isLoadingMore = false;

        chatMessagesDiv.addEventListener('scroll', function () {
            if (chatMessagesDiv.scrollTop === 0 && !isLoadingMore) {
                isLoadingMore = true;

                const currentScrollHeight = chatMessagesDiv.scrollHeight;

                $.ajax({
                    url: '@Url.Action("LoadMoreMessages", "Employer")',
                    data: {
                        chatId: chatId,
                        skip: loadedMessagesCount,
                        take: loadBatchSize
                    },
                    success: function (messages) {
                        const realMessages = messages.$values || [];

                        if (realMessages.length > 0) {
                            realMessages.forEach(msg => {
                                const isCurrentUser = msg.senderId === '@Model.CurrentUser.Id';
                                const msgDiv = document.createElement('div');
                                msgDiv.className = isCurrentUser ? 'msg receiver' : 'msg sender';
                                msgDiv.innerHTML = `
                                    <div class="avatar">
                                        <img src="${msg.avatar}" alt="">
                                    </div>
                                    <div class="content">
                                        <p>${msg.messageText}</p>
                                        <span class="time">${new Date(msg.sentAt).toLocaleString()}</span>
                                    </div>`;
                                chatMessagesDiv.insertBefore(msgDiv, chatMessagesDiv.firstChild);
                            });

                            // Maintain scroll position
                            const newScrollHeight = chatMessagesDiv.scrollHeight;
                            chatMessagesDiv.scrollTop = newScrollHeight - currentScrollHeight;

                            loadedMessagesCount += realMessages.length;
                        }

                        isLoadingMore = false;
                    },
                    error: function () {
                        console.error('Failed to load messages');
                        isLoadingMore = false;
                    }
                });
            }
        });
    </script>
}