@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
<style>
    /* Chat Button */
    .chat-button {
        position: fixed;
        bottom: 20px;
        right: 20px;
        padding: 12px 24px;
        font-size: 16px;
        border-radius: 50px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    /* Chat Widget */
    .chat-widget {
        position: fixed;
        bottom: 80px;
        right: 20px;
        width: 350px;
        max-height: 500px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        display: none;
        flex-direction: column;
        z-index: 1001;
        overflow: hidden;
    }

    .chat-header {
        background-color: #007bff;
        color: white;
        padding: 10px 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-header h5 {
        margin: 0;
        font-size: 16px;
    }

    .chat-history {
        flex-grow: 1;
        padding: 12px;
        overflow-y: auto;
        background-color: #fff;
    }

    .chat-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        background-color: #fff;
    }

    .chat-input input {
        flex-grow: 1;
        margin-right: 8px;
    }

    .user-message, .bot-message {
        max-width: 75%;
        margin-bottom: 8px;
        padding: 10px 14px;
        border-radius: 20px;
        font-size: 14px;
        word-wrap: break-word;
    }

    .user-message {
        background-color: #007bff;
        color: white;
        align-self: flex-end;
    }

    .bot-message {
        background-color: #e9ecef;
        color: #333;
        align-self: flex-start;
    }

    .chat-history .chat-card {
        background-color: #f6f9fc;
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        font-size: 14px;
    }

    .chat-history .chat-card {
        background-color: #e9ecef;
        padding: 16px;
        margin-bottom: 12px;
        border-radius: 12px;
        font-size: 14px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        line-height: 1.4;
    }

    .chat-history .chat-card h5 {
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 16px;
        font-weight: bold;
        color: #333;
    }

    .chat-history .chat-card p {
        margin: 6px 0;
    }

    .chat-history .chat-card strong {
        color: #555;
        display: inline-block;
        min-width: 120px;
    }

    .chat-history .chat-card a {
        color: #007bff;
        text-decoration: none;
    }

    .chat-history .chat-card a:hover {
        text-decoration: underline;
    }

    .chat-history .bot-message div {
        border-bottom: dashed;
    }
</style>

<!-- Chat Button -->
<button class="btn btn-primary chat-button" id="openChat">
    <i class="fas fa-comments"></i> Chat with Us
</button>

<!-- Chat Widget -->
<div class="chat-widget" id="chatWidget">
    <div class="chat-header">
        <h5>Chat Support</h5>
        <button type="button" class="btn-close btn-sm" aria-label="Close" id="closeChat"></button>
    </div>
    <div class="chatbox d-flex flex-column" style="height: 400px;">
        <div class="chat-history d-flex flex-column" id="chatHistory"></div>
        <div class="chat-input">
            <input type="text" id="userMessage" class="form-control" placeholder="Type your message...">
            <button class="btn btn-primary" id="sendMessage">Send</button>
        </div>
    </div>
</div>

<script>
    const currentUserId = "@(SignInManager.IsSignedIn(User) ? UserManager.GetUserId(User) : "")";
    document.addEventListener("DOMContentLoaded", function () {
        const chatWidget = document.getElementById("chatWidget");
        const openChat = document.getElementById("openChat");
        const closeChat = document.getElementById("closeChat");
        const sendMessageButton = document.getElementById("sendMessage");
        const userMessageInput = document.getElementById("userMessage");
        const chatHistory = document.getElementById("chatHistory");

        let isChatOpen = false;

        function toggleChat() {
            isChatOpen = !isChatOpen;
            chatWidget.style.display = isChatOpen ? "flex" : "none";
            if (isChatOpen) userMessageInput.focus();
        }

        openChat.addEventListener("click", toggleChat);
        closeChat.addEventListener("click", () => {
            isChatOpen = false;
            chatWidget.style.display = "none";
        });

        document.addEventListener("click", function (event) {
            const isClickInsideChat = chatWidget.contains(event.target) || openChat.contains(event.target);
            if (!isClickInsideChat && isChatOpen) {
                isChatOpen = false;
                chatWidget.style.display = "none";
            }
        });

        function addMessage(content, className) {
            const messageElement = document.createElement("div");
            messageElement.classList.add(className);
            messageElement.textContent = content;
            chatHistory.appendChild(messageElement);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        function getSessionHistory() {
            return JSON.parse(sessionStorage.getItem("chatHistory") || "[]");
        }

        function saveSessionHistory(message, role = "User") {
            const history = getSessionHistory();
            history.push({ role, content: message });
            sessionStorage.setItem("chatHistory", JSON.stringify(history));
        }

        function getLastResult() {
            return sessionStorage.getItem("lastQueryResult") || null;
        }

        function saveLastResult(json) {
            sessionStorage.setItem("lastQueryResult", json);
        }

        function addMessage(content, className) {
            const messageElement = document.createElement("div");
            messageElement.classList.add(className);
            messageElement.innerHTML = content;
            chatHistory.appendChild(messageElement);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        function handleSendMessage() {
            const userMessage = userMessageInput.value.trim();
            if (!userMessage) return;

            addMessage(userMessage, "user-message");
            saveSessionHistory(userMessage, "User");
            userMessageInput.value = "";

            fetch("/api/chat", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    sender: currentUserId,
                    receiver: "system",
                    content: userMessage,
                    history: getSessionHistory()
                })
            })
                .then(response => response.json())
                .then(data => {
                    const botMessage = data.message || "<p>Sorry, I couldn't understand your request.</p>";
                    addMessage(botMessage, "bot-message");
                    saveSessionHistory(botMessage, "Bot");

                    if (data.rawData) {
                        saveLastResult(JSON.stringify(data.rawData));
                    }
                })
                .catch(error => {
                    console.error("Chat error:", error);
                });
        }

        sendMessageButton.addEventListener("click", handleSendMessage);

        userMessageInput.addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                handleSendMessage();
            }
        });
        window.addEventListener("load", function () {
            sessionStorage.removeItem("chatHistory");
            sessionStorage.removeItem("lastQueryResult");
        });
    });
</script>
